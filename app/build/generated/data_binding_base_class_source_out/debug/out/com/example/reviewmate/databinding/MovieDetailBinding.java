// Generated by view binder compiler. Do not edit!
package com.example.reviewmate.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RatingBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.reviewmate.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MovieDetailBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView MovieLikeMenu;

  @NonNull
  public final TextView MovieTitleMenu;

  @NonNull
  public final Button addReviewButton;

  @NonNull
  public final TextView addReviewMenu;

  @NonNull
  public final TextView info;

  @NonNull
  public final TextView info2;

  @NonNull
  public final ImageView movieBackdrop;

  @NonNull
  public final RecyclerView movieDetailRecyclerView;

  @NonNull
  public final TextView movieId;

  @NonNull
  public final TextView movieOverview;

  @NonNull
  public final ImageView moviePoster;

  @NonNull
  public final CardView moviePosterCard;

  @NonNull
  public final RatingBar movieRate;

  @NonNull
  public final TextView movieReleaseDate;

  @NonNull
  public final TextView movieTitle;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final Toolbar toolbarBack;

  @NonNull
  public final View view1;

  @NonNull
  public final View view2;

  private MovieDetailBinding(@NonNull RelativeLayout rootView, @NonNull ImageView MovieLikeMenu,
      @NonNull TextView MovieTitleMenu, @NonNull Button addReviewButton,
      @NonNull TextView addReviewMenu, @NonNull TextView info, @NonNull TextView info2,
      @NonNull ImageView movieBackdrop, @NonNull RecyclerView movieDetailRecyclerView,
      @NonNull TextView movieId, @NonNull TextView movieOverview, @NonNull ImageView moviePoster,
      @NonNull CardView moviePosterCard, @NonNull RatingBar movieRate,
      @NonNull TextView movieReleaseDate, @NonNull TextView movieTitle,
      @NonNull NestedScrollView nestedScrollView, @NonNull Toolbar toolbarBack, @NonNull View view1,
      @NonNull View view2) {
    this.rootView = rootView;
    this.MovieLikeMenu = MovieLikeMenu;
    this.MovieTitleMenu = MovieTitleMenu;
    this.addReviewButton = addReviewButton;
    this.addReviewMenu = addReviewMenu;
    this.info = info;
    this.info2 = info2;
    this.movieBackdrop = movieBackdrop;
    this.movieDetailRecyclerView = movieDetailRecyclerView;
    this.movieId = movieId;
    this.movieOverview = movieOverview;
    this.moviePoster = moviePoster;
    this.moviePosterCard = moviePosterCard;
    this.movieRate = movieRate;
    this.movieReleaseDate = movieReleaseDate;
    this.movieTitle = movieTitle;
    this.nestedScrollView = nestedScrollView;
    this.toolbarBack = toolbarBack;
    this.view1 = view1;
    this.view2 = view2;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MovieDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MovieDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.movie_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MovieDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.MovieLikeMenu;
      ImageView MovieLikeMenu = ViewBindings.findChildViewById(rootView, id);
      if (MovieLikeMenu == null) {
        break missingId;
      }

      id = R.id.MovieTitleMenu;
      TextView MovieTitleMenu = ViewBindings.findChildViewById(rootView, id);
      if (MovieTitleMenu == null) {
        break missingId;
      }

      id = R.id.add_review_button;
      Button addReviewButton = ViewBindings.findChildViewById(rootView, id);
      if (addReviewButton == null) {
        break missingId;
      }

      id = R.id.addReviewMenu;
      TextView addReviewMenu = ViewBindings.findChildViewById(rootView, id);
      if (addReviewMenu == null) {
        break missingId;
      }

      id = R.id.info;
      TextView info = ViewBindings.findChildViewById(rootView, id);
      if (info == null) {
        break missingId;
      }

      id = R.id.info2;
      TextView info2 = ViewBindings.findChildViewById(rootView, id);
      if (info2 == null) {
        break missingId;
      }

      id = R.id.movie_backdrop;
      ImageView movieBackdrop = ViewBindings.findChildViewById(rootView, id);
      if (movieBackdrop == null) {
        break missingId;
      }

      id = R.id.movieDetailRecyclerView;
      RecyclerView movieDetailRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (movieDetailRecyclerView == null) {
        break missingId;
      }

      id = R.id.movieId;
      TextView movieId = ViewBindings.findChildViewById(rootView, id);
      if (movieId == null) {
        break missingId;
      }

      id = R.id.movie_overview;
      TextView movieOverview = ViewBindings.findChildViewById(rootView, id);
      if (movieOverview == null) {
        break missingId;
      }

      id = R.id.movie_poster;
      ImageView moviePoster = ViewBindings.findChildViewById(rootView, id);
      if (moviePoster == null) {
        break missingId;
      }

      id = R.id.movie_poster_card;
      CardView moviePosterCard = ViewBindings.findChildViewById(rootView, id);
      if (moviePosterCard == null) {
        break missingId;
      }

      id = R.id.movie_rate;
      RatingBar movieRate = ViewBindings.findChildViewById(rootView, id);
      if (movieRate == null) {
        break missingId;
      }

      id = R.id.movie_release_date;
      TextView movieReleaseDate = ViewBindings.findChildViewById(rootView, id);
      if (movieReleaseDate == null) {
        break missingId;
      }

      id = R.id.movie_title;
      TextView movieTitle = ViewBindings.findChildViewById(rootView, id);
      if (movieTitle == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.toolbar_back;
      Toolbar toolbarBack = ViewBindings.findChildViewById(rootView, id);
      if (toolbarBack == null) {
        break missingId;
      }

      id = R.id.view1;
      View view1 = ViewBindings.findChildViewById(rootView, id);
      if (view1 == null) {
        break missingId;
      }

      id = R.id.view2;
      View view2 = ViewBindings.findChildViewById(rootView, id);
      if (view2 == null) {
        break missingId;
      }

      return new MovieDetailBinding((RelativeLayout) rootView, MovieLikeMenu, MovieTitleMenu,
          addReviewButton, addReviewMenu, info, info2, movieBackdrop, movieDetailRecyclerView,
          movieId, movieOverview, moviePoster, moviePosterCard, movieRate, movieReleaseDate,
          movieTitle, nestedScrollView, toolbarBack, view1, view2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
